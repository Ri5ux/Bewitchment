buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.7'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: "checkstyle"

checkstyle {
    toolVersion = "6.11.2"
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
}

def username = "${mod_name}"
if (project.hasProperty('dev_username'))
    username = "${dev_username}"

version = "${mc_version}-${bw_version}"
group = "com.bewitchment" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Bewitchment"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

class StructExtApi {
    String name
    String api
    String exclusion
    String root = api
}

minecraft {
    mappings = mcp_mappings
    runDir = "run"

    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replace '@VERSION@', project.version
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "BloodMagic.java"

    clientRunArgs += "--username=${username}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Mobius Repo"
        url = "http://tehnut.info/maven"
    }
    maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.mcmoddev.com/"
    }
    maven {
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        url = 'https://maven.blamejared.com'
    }
    maven {
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}"
    compile "baubles:Baubles:1.12:${baubles_version}"
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    compile "thaumcraft:Thaumcraft:1.12.2:${thaumcraft_version}"
    compile "vazkii.patchouli:Patchouli:${patchouli_version}"
    deobfCompile "team.chisel.ctm:CTM:MC1.12.2-0.3.3.22"
    deobfCompile "team.chisel:Chisel:MC1.12.2-0.2.1.35"
    compile "net.ilexiconn:llibrary:1.7.17-1.12.2:dev"	
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:all", "-Xlint:deprecation", "-Xlint:rawtypes", "-Xlint:unchecked"]
    options.deprecation = true
    options.encoding = "UTF-8"
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

idea {
    module {
        inheritOutputDirs = true
    }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.main.output //Save .class files
    from sourceSets.main.allJava //Save corresponding .java files
    from sourceSets.api.allJava // MinecraftForge Sources
    include 'com/bewitchment/api/**/*' //Only include the api directory and subdirectory
}

artifacts {
    archives apiJar
}
